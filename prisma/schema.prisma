// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id          String   @id @default(cuid())
  name        String
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String   @default("US")
  phone       String?
  email       String?
  website     String?
  logo        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  classes     Class[]
  subjects    Subject[]
  terms       Term[]

  @@map("schools")
}

model User {
  id              String   @id @default(cuid())
  clerkId         String   @unique
  email           String   @unique
  firstName       String
  lastName        String
  role            UserRole
  avatar          String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // School relation
  schoolId        String
  school          School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  // Relations based on role
  studentProfile  StudentProfile?
  teacherProfile  TeacherProfile?
  parentProfile   ParentProfile?
  principalProfile PrincipalProfile?

  // Class enrollments (for students)
  enrollments     Enrollment[]
  
  // Teaching assignments (for teachers)
  teachingAssignments TeachingAssignment[]

  // Parent-child relationships
  parentRelationships ParentChildRelationship[] @relation("ParentChild")
  childRelationships  ParentChildRelationship[] @relation("ChildParent")

  // Class subject teaching
  classSubjects   ClassSubject[]

  // Assignment submissions (for students)
  assignmentSubmissions AssignmentSubmission[]

  @@map("users")
}

model StudentProfile {
  id                String   @id @default(cuid())
  studentId         String   @unique
  student           User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  dateOfBirth       DateTime?
  grade             String?
  studentIdNumber   String?
  emergencyContact  String?
  medicalInfo       String?
  address           String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("student_profiles")
}

model TeacherProfile {
  id              String   @id @default(cuid())
  teacherId       String   @unique
  teacher         User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  
  employeeId      String?
  department      String?
  hireDate        DateTime?
  salary          Float?
  qualifications  String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("teacher_profiles")
}

model ParentProfile {
  id              String   @id @default(cuid())
  parentId        String   @unique
  parent          User     @relation(fields: [parentId], references: [id], onDelete: Cascade)
  
  phone           String?
  address         String?
  emergencyContact String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("parent_profiles")
}

model PrincipalProfile {
  id              String   @id @default(cuid())
  principalId     String   @unique
  principal       User     @relation(fields: [principalId], references: [id], onDelete: Cascade)
  
  employeeId      String?
  hireDate        DateTime?
  phone           String?
  address         String?
  emergencyContact String?
  qualifications  String?
  yearsOfExperience Int?
  previousSchool  String?
  educationBackground String?
  salary          Float?
  administrativeArea String? // e.g., "Academic Affairs", "Student Services", "Operations"
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("principal_profiles")
}

model ParentChildRelationship {
  id              String   @id @default(cuid())
  parentId        String
  childId         String
  relationship    RelationshipType @default(PARENT)
  
  parent          User     @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  child           User     @relation("ChildParent", fields: [childId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([parentId, childId])
  @@map("parent_child_relationships")
}

model Class {
  id              String   @id @default(cuid())
  name            String
  grade           String?
  section         String?
  schoolId        String
  school          School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  enrollments     Enrollment[]
  assignments     Assignment[]
  subjects        ClassSubject[]

  @@map("classes")
}

model Subject {
  id              String   @id @default(cuid())
  name            String
  code            String?
  description     String?
  schoolId        String
  school          School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  classSubjects   ClassSubject[]
  assignments     Assignment[]

  @@map("subjects")
}

model ClassSubject {
  id              String   @id @default(cuid())
  classId         String
  subjectId       String
  teacherId       String
  
  class           Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject         Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher         User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Teaching assignments
  teachingAssignments TeachingAssignment[]

  @@unique([classId, subjectId])
  @@map("class_subjects")
}

model Enrollment {
  id              String   @id @default(cuid())
  studentId       String
  classId         String
  enrolledAt      DateTime @default(now())
  status          EnrollmentStatus @default(ACTIVE)
  
  student         User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class           Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([studentId, classId])
  @@map("enrollments")
}

model TeachingAssignment {
  id              String   @id @default(cuid())
  teacherId       String
  classSubjectId  String
  
  teacher         User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  classSubject    ClassSubject @relation(fields: [classSubjectId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([teacherId, classSubjectId])
  @@map("teaching_assignments")
}

model Term {
  id              String   @id @default(cuid())
  name            String
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean  @default(false)
  schoolId        String
  school          School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  assignments     Assignment[]

  @@map("terms")
}

model Assignment {
  id              String   @id @default(cuid())
  title           String
  description     String?
  dueDate         DateTime
  maxPoints       Float?
  classId         String
  subjectId       String
  termId          String
  
  class           Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject         Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  term            Term     @relation(fields: [termId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  submissions     AssignmentSubmission[]

  @@map("assignments")
}

model AssignmentSubmission {
  id              String   @id @default(cuid())
  assignmentId    String
  studentId       String
  content         String?
  attachments     String[] // Array of file URLs
  submittedAt     DateTime @default(now())
  grade           Float?
  feedback        String?
  
  assignment      Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student         User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([assignmentId, studentId])
  @@map("assignment_submissions")
}

// Enums
enum UserRole {
  STUDENT
  TEACHER
  PARENT
  PRINCIPAL
}

enum RelationshipType {
  PARENT
  GUARDIAN
  GRANDPARENT
  SIBLING
}

enum EnrollmentStatus {
  ACTIVE
  INACTIVE
  TRANSFERRED
  GRADUATED
}
